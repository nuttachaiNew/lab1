// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.spt.workshop1.domain;

import com.spt.workshop1.domain.EmpType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect EmpType_Roo_Finder {
    
    public static Long EmpType.countFindEmpTypesByEmpTypeNameLike(String empTypeName) {
        if (empTypeName == null || empTypeName.length() == 0) throw new IllegalArgumentException("The empTypeName argument is required");
        empTypeName = empTypeName.replace('*', '%');
        if (empTypeName.charAt(0) != '%') {
            empTypeName = "%" + empTypeName;
        }
        if (empTypeName.charAt(empTypeName.length() - 1) != '%') {
            empTypeName = empTypeName + "%";
        }
        EntityManager em = EmpType.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM EmpType AS o WHERE LOWER(o.empTypeName) LIKE LOWER(:empTypeName)", Long.class);
        q.setParameter("empTypeName", empTypeName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<EmpType> EmpType.findEmpTypesByEmpTypeNameLike(String empTypeName) {
        if (empTypeName == null || empTypeName.length() == 0) throw new IllegalArgumentException("The empTypeName argument is required");
        empTypeName = empTypeName.replace('*', '%');
        if (empTypeName.charAt(0) != '%') {
            empTypeName = "%" + empTypeName;
        }
        if (empTypeName.charAt(empTypeName.length() - 1) != '%') {
            empTypeName = empTypeName + "%";
        }
        EntityManager em = EmpType.entityManager();
        TypedQuery<EmpType> q = em.createQuery("SELECT o FROM EmpType AS o WHERE LOWER(o.empTypeName) LIKE LOWER(:empTypeName)", EmpType.class);
        q.setParameter("empTypeName", empTypeName);
        return q;
    }
    
    public static TypedQuery<EmpType> EmpType.findEmpTypesByEmpTypeNameLike(String empTypeName, String sortFieldName, String sortOrder) {
        if (empTypeName == null || empTypeName.length() == 0) throw new IllegalArgumentException("The empTypeName argument is required");
        empTypeName = empTypeName.replace('*', '%');
        if (empTypeName.charAt(0) != '%') {
            empTypeName = "%" + empTypeName;
        }
        if (empTypeName.charAt(empTypeName.length() - 1) != '%') {
            empTypeName = empTypeName + "%";
        }
        EntityManager em = EmpType.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM EmpType AS o WHERE LOWER(o.empTypeName) LIKE LOWER(:empTypeName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<EmpType> q = em.createQuery(queryBuilder.toString(), EmpType.class);
        q.setParameter("empTypeName", empTypeName);
        return q;
    }
    
}
